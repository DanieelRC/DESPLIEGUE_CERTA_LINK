<div class="container mt-5">
  <!-- TÍTULO -->
  <h2 class="text-center mb-4">Gestión de Cobros a Pacientes</h2>

  <!-- Botón de regreso -->
  <div class="d-flex justify-content-center mb-4">
    <a class="btn btn-consultas btn-lg w-50" href="/AdministracionFolios">
      Regresar
    </a>
  </div>

  <!-- Barra de búsqueda -->
  <div class="mb-4 text-center">
    <input type="text" id="searchInput" class="form-control w-50 mx-auto" placeholder="Buscar folio, paciente o médico...">
  </div>

  <!-- Contenedor principal -->
  <div class="row mt-5 justify-content-center">
    {{#if datos}}
    <div id="foliosContainer" class="grid grid-2" style="width: 80%;">
      {{#each datos}}
      <div class="card shadow-lg p-3 mb-3 folio-card" 
          data-folio="{{this.Folio}}" 
          data-habitacion="{{this.Habitacion}}"
          data-fecha="{{this.Fecha}}"
          data-paciente="{{this.Paciente}}"
          data-tipo-folio="{{this.tipo_folio}}"
          data-estado-folio="{{this.Medico_Nombre}} {{this.Medico_Apellido_P}} {{this.Medico_Apellido_M}}"
          data-monto-total="{{this.Total}}"
          data-monto-restante="{{this.Falta}}">
        <h4 class="mb-2"><strong>Folio:</strong> {{this.Folio}}</h4>
        <p class="mb-1"><strong>Habitación:</strong> {{this.Habitacion}}</p>
        <p class="mb-1"><strong>Fecha:</strong> {{this.Fecha}}</p>
        <p class="mb-1"><strong>Paciente:</strong> {{this.Paciente}}</p>
        <p class="mb-1"><strong>Médico:</strong> {{this.Medico_Nombre}} {{this.Medico_Apellido_P}} {{this.Medico_Apellido_M}}</p>
        <p class="mb-1"><strong>Total a cobrar:</strong> {{formatearMoneda this.Total}}</p>
        <p class="mb-3"><strong>Se debe cobrar:</strong> {{formatearMoneda this.Falta}}</p>

        <div class="d-grid gap-2">
          {{#MasGrandeQue this.Falta 0}}
          <a href="../Cobros/Cobro/{{this.Folio}}" class="btn btn-cobros btn-sm">
            Abonar
          </a>
          {{/MasGrandeQue}}
          <a href="../Cobros/Detalles/{{this.Folio}}/paciente" class="btn btn-outline-secondary-custom btn-sm">
            Detalles de los cobros
          </a>
        </div>
      </div>
      {{/each}}
    </div>

    <!-- Paginación -->
    <div class="mt-4 d-flex justify-content-center align-items-center gap-3">
      <button id="prevPage" class="btn btn-outline-secondary-custom" disabled>&#8592; Anterior</button>
      <span id="paginationInfo">Página 1 de X</span>
      <button id="nextPage" class="btn btn-outline-secondary-custom">&rarr; Siguiente</button>
    </div>

    {{else}}
    <div class="card mx-auto" style="max-width: 300px;">
      <div class="card-header text-center"><h3 class="m-0">Crea un folio</h3></div>
      <div class="card-body text-center">
        <a href="../Folio/CrearFolio?tipoFolio=Particulares" class="btn btn-success btn-lg w-100">Crear Folio</a>
      </div>
    </div>
    {{/if}}
  </div>
</div>

<script>
  document.addEventListener("DOMContentLoaded", function () {
    const searchInput = document.getElementById("searchInput");
    const foliosContainer = document.getElementById("foliosContainer");
    const folios = Array.from(document.querySelectorAll(".folio-card"));
    const paginationInfo = document.getElementById("paginationInfo");
    const prevPageBtn = document.getElementById("prevPage");
    const nextPageBtn = document.getElementById("nextPage");

    let currentPage = 1;
    let itemsPerPage = 4;
    let allFolios = [...folios];
    let filteredFolios = [...folios];

    function showPage(page) {
      let start = (page - 1) * itemsPerPage;
      let end = start + itemsPerPage;

      folios.forEach((folio, index) => {
        folio.style.display = "none"; // Ocultar todos
      });

      filteredFolios.slice(start, end).forEach(folio => {
        folio.style.display = "block"; // Mostrar los de la página actual
      });

      paginationInfo.textContent = `Página ${page} de ${Math.ceil(filteredFolios.length / itemsPerPage)}`;
      prevPageBtn.disabled = page === 1;
      nextPageBtn.disabled = page >= Math.ceil(filteredFolios.length / itemsPerPage);
    }

    searchInput.addEventListener("input", function () {
      let query = searchInput.value.toLowerCase();
      filteredFolios = allFolios.filter(folio => {
        return folio.textContent.toLowerCase().includes(query);
      });

      currentPage = 1;
      showPage(currentPage);
    });

    prevPageBtn.addEventListener("click", function () {
      if (currentPage > 1) {
        currentPage--;
        showPage(currentPage);
      }
    });

    nextPageBtn.addEventListener("click", function () {
      if (currentPage < Math.ceil(filteredFolios.length / itemsPerPage)) {
        currentPage++;
        showPage(currentPage);
      }
    });

    showPage(currentPage);
  });
</script>

